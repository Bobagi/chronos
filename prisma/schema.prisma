generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GameMode {
  CLASSIC
  ATTRIBUTE_DUEL
}

enum DuelStage {
  PICK_CARD
  PICK_ATTRIBUTE
  REVEAL
  RESOLVED
}

enum UserRole {
  USER
  ADMIN
}

model Player {
  id           String    @id @default(uuid())
  username     String    @unique

  passwordHash String
  role         UserRole  @default(USER)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  gamesAsA     Game[]    @relation("PlayerA")
  gamesAsB     Game[]    @relation("PlayerB")
  sentFriendships     Friendship[]        @relation("FriendshipRequester")
  receivedFriendships Friendship[]        @relation("FriendshipAddressee")
  blockedFriendships  Friendship[]        @relation("FriendshipBlocker")
  sentMessages        FriendChatMessage[] @relation("ChatSender")
  receivedMessages    FriendChatMessage[] @relation("ChatRecipient")
}

model Game {
  id        String   @id @default(uuid())

  playerAId String
  playerBId String
  playerA   Player   @relation("PlayerA", fields: [playerAId], references: [id])
  playerB   Player   @relation("PlayerB", fields: [playerBId], references: [id])

  turn      Int
  hp        Json
  winner    String?
  hands     Json
  decks     Json
  log       Json
  turnDeadline DateTime?

  mode        GameMode   @default(CLASSIC)
  duelStage   DuelStage?
  duelCenter  Json?
  discardPiles Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Friendship {
  id           String            @id @default(uuid())
  requesterId  String
  addresseeId  String
  status       FriendshipStatus  @default(PENDING)
  blockedById  String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  requester    Player            @relation("FriendshipRequester", fields: [requesterId], references: [id])
  addressee    Player            @relation("FriendshipAddressee", fields: [addresseeId], references: [id])
  blockedBy    Player?           @relation("FriendshipBlocker", fields: [blockedById], references: [id])
  messages     FriendChatMessage[]

  @@unique([requesterId, addresseeId])
}

model FriendChatMessage {
  id           String   @id @default(uuid())
  friendshipId String
  senderId     String
  recipientId  String
  body         String
  createdAt    DateTime @default(now())

  friendship   Friendship @relation(fields: [friendshipId], references: [id])
  sender       Player     @relation("ChatSender", fields: [senderId], references: [id])
  recipient    Player     @relation("ChatRecipient", fields: [recipientId], references: [id])

  @@index([friendshipId, createdAt])
}

model Card {
  id          String   @id @default(uuid())
  code        String   @unique
  name        String
  description String
  number      Int      @default(0)
  damage      Int?
  heal        Int?
  imageUrl    String
  might       Int      @default(0)
  fire        Int      @default(0)
  magic       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CardTemplate {
  id         String   @id @default(uuid())
  name       String   @unique
  frameUrl   String
  fontColor  String
  rarity     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
